#!/bin/bash

RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
MAGENTA="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
RESET="$(tput sgr0)"
YES="^(y|yes|yas)$"
SOURCE_IGNORES="Jenkinsfile Drakefile Dockerfile .dockerignore btjsenv .github/PULL_REQUEST_TEMPLATE.md .github/CODEOWNERS"

dotenv() {
  if [ ! -f .env ]; then
    echo "${RED}Please create a .env file first. See DEVELOPMENT.md for details.${RESET}"
    exit 1
  else
    set -o allexport
    . .env
    set +o allexport
  fi
}

check_npm_registry() {
  if grep -q "paypalinc" package-lock.json; then
  echo "${RED}Internal NPM registry URLs detected in package-lock.json! Please run a fresh 'npm install --registry=https://registry.npmjs.org'."
  echo "${RED}You can use 'grep \"paypalinc\" package-lock.json' to ensure only public npm registry is being used."
  exit 1
  fi
}

set -e

handle_abort() {
  >&2 echo ''
  >&2 echo -e "${RED}Aborting!${RESET}"
  exit 1
}

get_package_json_version() {
  grep '"version"' package.json | cut -d':' -f2- | tr -d '" ,'
}

get_version_for_prompt() {
  local latest_commit
  local latest_tag

  latest_commit="$(git show --oneline | head -n 1 | awk '{print $1}')"
  latest_tag="$(git describe --abbrev=0 --tags)"

  set +e
  git show-ref --tags --dereference | grep "$latest_commit" > /dev/null
  if [ $? -eq 0 ]; then
    local commit_or_tag="tag $latest_tag"
  else
    local commit_or_tag="$latest_commit"
  fi
  set -e
  echo "$commit_or_tag"
}

confirm_destination() {
  DEST="$1"

  if [ -d "$DEST" ]; then
    echo -en "${YELLOW}Is ${GREEN}$DEST${YELLOW} in the state you want (y/n)? $RESET"
    read message
    if [[ ! "$message" =~ $YES ]]; then
      >&2 echo -e "${RED}You should do that before proceeding.$RESET"
      exit 1
    fi
    echo
  else
    echo -e "${RED}$DEST does not exist!$RESET"
    exit 1
  fi
}

confirm_error_code_documentation() {
  echo -en "${YELLOW}Check if any new error codes were added to any components. If there were, were they also added to JSDoc? If no error codes were added in this release, just press y to skip this check. (y/n)? $RESET"
  read message
  if [[ ! "$message" =~ $YES ]]; then
    >&2 echo -e "${RED}You should do that before proceeding.$RESET"
    exit 1
  fi
  echo
}

reinstall_dependencies() {
  echo -en "${YELLOW}Reinstall${RESET} npm dependencies (y/n)? "
  read message

  if [[ "$message" =~ $YES ]]; then
    rm -rf ./node_modules
    echo 'âœ” npm modules removed'

    npm install
  fi
}

run_unit_tests() {
  echo -en "${YELLOW}Run${RESET} unit tests (y/n)? "
  read message

  if [[ "$message" =~ $YES ]]; then
    npm test
  fi
}

confirm_version() {
  echo -en "Release ${MAGENTA}braintree.js $BLUE$(get_package_json_version)$RESET"
  echo -en " at $YELLOW$(get_version_for_prompt)$RESET (y/n)? "
  read message

  if [[ ! "$message" =~ $YES ]]; then
    >&2 echo -e "${RED}Aborting...$RESET"
    exit 1
  fi
}

join() {
  # IFS is used as the separator for $* printing
  local IFS="$1"
  shift
  echo "$*"
}

release_source() {
  set +e

  local CP_CMD="cp"
  #if [[ "$(uname)"="Darwin" ]]; then
  #  # Coreutils version of cp supports --parents, mac default one doesn't
  #  CP_CMD="gcp"
  #fi

  git ls-files | egrep -v "$(join '|' $SOURCE_IGNORES)" | xargs "$CP_CMD" --parents -t "$BRAINTREE_JS_SOURCE_DEST"
  echo -e "Applied source changes in ${BLUE}$BRAINTREE_JS_SOURCE_DEST${RESET}."
  exit 0
  set -e
}

main() {
  TASK="$1"

  trap 'handle_abort' SIGINT SIGTERM
  cd "$(dirname "${BASH_SOURCE[0]}")/.."
  dotenv
  check_npm_registry

  case "$TASK" in
    hosted)
      confirm_destination "$BRAINTREE_JS_HOSTED_DEST"
      confirm_error_code_documentation
      reinstall_dependencies
      run_unit_tests
      confirm_version
      env BRAINTREE_JS_ENV=production gulp release:hosted
      ;;
    bower)
      confirm_destination "$BRAINTREE_JS_BOWER_DEST"
      reinstall_dependencies
      confirm_version
      env BRAINTREE_JS_ENV=production gulp release:bower
      ;;
    npm)
      reinstall_dependencies
      confirm_version
      env BRAINTREE_JS_ENV=production gulp release:npm
      ;;
    jsdoc)
      ./scripts/deploy-jsdoc
      ;;
    source)
      confirm_destination "$BRAINTREE_JS_SOURCE_DEST"
      release_source
      ;;
    *)
      echo "${YELLOW}${TASK}${RED} is not a valid option. Choose from the following:${RESET}"
      echo "* hosted"
      echo "* npm"
      echo "* bower"
      echo "* jsdoc"
      echo "* source"
      exit 1
      ;;
  esac
}

main "$@"
